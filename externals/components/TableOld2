'use client'

import { ChangeEvent, CSSProperties, Dispatch, Fragment, isValidElement, ReactNode, SetStateAction, useEffect, useRef, useState } from 'react'
import Confirm from './popups/Confirm';
import Search from './Search';
import { api, cn, useFormManager } from '../utils/frontend';
import { CaretLeftIcon, CaretRightIcon, DotsThreeIcon, FadersIcon, PlusCircleIcon, TrashIcon, TrashSimpleIcon, XIcon } from '@phosphor-icons/react';
import { toast } from 'react-toastify';
import { useContextGlobal } from '../contexts/ContextGlobal';
import Dropdown from './popups/Dropdown';
import InputText from './inputs/InputText';
import Input, { typeInputType } from './inputs/Input';
import Link from 'next/link';

export interface typePrototypeTable {
  label: ReactNode;
  name: string | ((dataRow: Record<string, any>, indexDataRow?: any) => ReactNode);
  className?: string;
  style?: CSSProperties;
  advanceSearch?: { name?: string; };
  advanceFilter?: {
    name?: string;
    label?: string;
    type?: typeInputType;
    selectConfig?: {
      options?: Array<string | number | { label: ReactNode; value: any }>;
      optionFromApi?: {
        primaryKey?: string;
        url: string;
        render: (data: Record<string, any>[]) => ({ label: ReactNode; value: string | number }[]);
      };
      onSearch?: (value: string) => any;
      noSearch?: boolean;
      noUnset?: boolean;
    };
  };
  hide?: boolean;
};

export interface typeDataTable {
  data?: Array<Record<string, any>>;
  selectedRows?: Array<Record<string, any>>;
  statusCode?: number;
  loadDataTable?: () => any;
  confirmDeletedRows?: Array<Record<string, any>>;
}

export default function TableOld2({
  prototypeTable,
  actions,
  stateDataTable,
  url,
  fmParams,
  primaryKey = "id",
  className,
  onSearch,
  onDelete,
  onClickRow,
  showAdvanceSearch,
  noAdvanceFilter,
  noHeader,
  noNumber,
  noSearch,
  noPerPage,
  noPaginate,
  noSelectRow,
  leftElement,
  rightElement,
  type
}: {
  prototypeTable: Array<typePrototypeTable>;
  actions?: Array<'delete' | {
    onClick?: () => any;
    href?: string;
    icon?: ReactNode;
    label?: ReactNode;
    className?: string;
  }>;
  stateDataTable?: [typeDataTable, Dispatch<SetStateAction<typeDataTable>>];
  url?: string;
  fmParams?: ReturnType<typeof useFormManager>;
  primaryKey?: string;
  className?: string;
  onSearch?: (value: string) => any;
  onClickRow?: (dataRow: any) => any;
  onDelete?: (onSuccess: (noReload?: boolean) => any) => any;
  showAdvanceSearch?: boolean;
  noAdvanceFilter?: boolean;
  noHeader?: boolean;
  noNumber?: boolean;
  noSearch?: boolean;
  noPerPage?: boolean;
  noPaginate?: boolean;
  noSelectRow?: boolean;
  leftElement?: ReactNode;
  rightElement?: ReactNode;
  type?: 'carded-section' | 'carded' | 'striped';
}) {
  const { ScreenWidth } = useContextGlobal();
  const refTimerAdvanceSearch = useRef<NodeJS.Timeout[]>([]);
  const refTimerTouchHold = useRef<{ timer: NodeJS.Timeout; isWaiting: boolean; startX?: any; startY?: any; }>({} as any);
  const [DataTable, setDataTable] = stateDataTable ?? useState<typeDataTable>({});
  const [LabelFilters, setLabelFilters] = useState<Array<any>>([]);
  const fmFilters = useFormManager();
  if (!fmParams) fmParams = useFormManager();



  /**
   * Function Handler
   */
  function loadDataTable() {
    if (url) {
      setDataTable((prev) => ({ ...prev, statusCode: 202 }));
      const objParams = { ...fmParams?.values };
      try {
        if (objParams?.filters) objParams.filters = JSON.stringify(objParams.filters);
      } catch (error) { }
      api({ url, objParams }).then(async (res) => {
        let { data, paginate, message } = await res.json();
        if (res.status != 200) toast.error(message);
        if (!paginate) paginate = { page: 1, per_page: 10, total: 0, total_pages: 1 };
        if (!data) data = [];
        setDataTable((prev) => ({ ...prev, selectedRows: [], data: data, paginate, statusCode: res.status }));
      });
    }
  }

  function handleDelete() {
    if (onDelete) {
      onDelete((noReload) => {
        setDataTable((prev) => ({ ...(prev ?? {}), confirmDeletedRows: [] }));
        if (!noReload) loadDataTable();
      });
    } else if (url) {
      api({ method: 'DELETE', url: `${url}/${DataTable.selectedRows?.map((sr) => sr[primaryKey])?.join(',')}`, }).then(async (res) => {
        if (res.status == 200) {
          setDataTable((prev) => ({ ...(prev ?? {}), confirmDeletedRows: [] }));
          loadDataTable();
          toast.success((await res.json())?.message ?? 'Berhasil!')
        }
      });
    } else setDataTable((prev) => ({ ...(prev ?? {}), confirmDeletedRows: [] }));
  };

  function handleSearch(keyWord: string) {
    if (onSearch) onSearch(keyWord);
    fmParams?.setValues((prev) => ({ ...prev, page: 1, search: keyWord }));
  }

  function onChangePage(newPage: number) {
    if ((fmParams?.values?.page ?? 1) != newPage) fmParams?.setValues((prev: typeDataTable) => ({ ...prev, page: newPage }));
  }

  const getDataCell = (dataRow: Record<string, any>, name: any) => (typeof (name) == 'function' ? name(dataRow) : dataRow[name]);



  /**
   * useEffect
   */
  useEffect(loadDataTable, [url, fmParams?.values]);

  useEffect(() => {
    if (stateDataTable && (!DataTable.loadDataTable)) {
      setDataTable((prev) => ({ ...prev, loadDataTable }));
    }
  }, [stateDataTable]);




  /**
   * Short hand var
   */
  const dataShoweds = url ? DataTable.data : DataTable.data?.filter((data: any) => (
    prototypeTable?.find(({ name }) => (
      String(isValidElement(data) ? data : getDataCell(data, name))
        .toLowerCase().match(String(fmParams?.values?.search ?? '')?.toLowerCase())
    ))
  ));
  const totalItem = fmParams?.values?.total ?? dataShoweds?.length ?? 0;
  const perPage = fmParams?.values?.per_page ?? 50;
  const currentPage = fmParams?.values?.page ?? 1;
  const prevPage = currentPage - 1;
  const nextPage = currentPage + 1;
  const lastPage = Math.ceil(totalItem / perPage) || 1;
  const dataPaginateds = (url || !fmParams?.values?.per_page) ? dataShoweds : dataShoweds?.filter((_, indexDataRow) => (
    (indexDataRow >= (perPage * (currentPage - 1))) && (indexDataRow < (perPage * currentPage))
  ));
  const sequenceFirstItemShowed = perPage * (currentPage > 0 ? currentPage - 1 : 0);
  if (noNumber == undefined) noNumber = ScreenWidth <= 640;
  let cnItem = `inline-flex items-center justify-center rounded-md ring-offset-background transition-colors`;
  cnItem += ` hover:bg-gray-100 h-8 cursor-pointer aspect-square`;
  let rowNumber = 0;



  /**
   * Rendered JSX
   */
  return (
    <>
      <div className='bg-white'>
        <div className="flex max-xl:flex-col gap-4 pb-4">
          <div className=''>{leftElement}</div>
          <div className='lg:ml-auto'>
            <div className=' flex max-lg:flex-col gap-2'>
              <Fragment>{rightElement}</Fragment>
              {(!noSearch || !noAdvanceFilter) && (
                <div className='grow flex relative'>
                  {!noSearch && (<Search className={`${!noAdvanceFilter ? 'rounded-r-none' : ''} h-10`} onSubmit={handleSearch} />)}
                  {!noAdvanceFilter && (<AdvanceFilter
                    fmParams={fmParams}
                    prototypeTable={prototypeTable}
                    noSearch={noSearch}
                    fmFilters={fmFilters}
                    setLabelFilters={setLabelFilters}
                  />)}
                </div>
              )}
            </div>
            <div className='flex sm:justify-end gap-2 mt-2'>
              {(fmParams.values?.filters as any[])?.map((filter, indexFilter) => {
                if (!(filter[0] && filter[1])) return null;
                return (
                  <div
                    key={indexFilter}
                    className={cn(
                      'border rounded-full flex items-center gap-2 text-sm cursor-pointer hover:bg-primary/10 hover:text-primary',
                      '[&:has(.btn-delete:hover)]:text-red-500 [&:has(.btn-delete:hover)]:border-transparent [&:has(.btn-delete:hover)]:bg-red-50'
                    )}
                  >
                    <div
                      className='pl-4 py-1.5 rounded-l-full'
                      onClick={() => { fmFilters.setValue('filters', fmParams.values?.filters ?? []); fmFilters.setShow(true); }}
                    ><span className='capitalize'>{LabelFilters[indexFilter]}</span> {filter[1]} {filter[2]}</div>
                    <XIcon
                      className='mt-[1px] hover:text-red-500 h-full mr-2 cursor-pointer text-sm btn-delete'
                      onClick={() => {
                        fmParams.setValue('filters', (prev: any[]) => prev.filter((_, indexRmFilter) => indexRmFilter != indexFilter));
                        setLabelFilters((prev: any[]) => prev.filter((_, indexRmFilter) => indexRmFilter != indexFilter));
                      }}
                    />
                  </div>
                )
              })}
              <div className='sm:h-8 -mr-2 opacity-0' />
            </div>
          </div>
        </div>
      </div>
      <div className={cn(`overflow-auto max-sm:border-t pb-16 w-full`, { 'section-table': type == 'carded-section' }, className)}>
        <table className={`table table-${(type ?? 'striped').replace('-section', '')}`}>
          <thead>
            {!(noHeader ?? ScreenWidth <= 640) && (
              <tr>
                {(!noSelectRow && actions?.length) && (
                  <th className={`w-0 prevent-show`}>
                    <input type="checkbox" checked={Boolean(DataTable.selectedRows?.length && DataTable.selectedRows?.length == dataPaginateds?.length)}
                      onChange={(event) => setDataTable((prev) => ({ ...(prev), selectedRows: event.target.checked ? (dataPaginateds ?? []) : [] }))} />
                  </th>
                )}
                {!noNumber && <th className={`w-0`}>No.</th>}
                {prototypeTable?.map((col, indexCol) => (<th key={indexCol} className={col.className} style={col.style}>{col.label}</th>))}
              </tr>
            )}
            {(showAdvanceSearch && ScreenWidth > 640) && (
              <tr>
                {(!noSelectRow && actions?.length) && <th key="onSelectRows" />}
                {!noNumber && <th key="noNumber" />}
                {prototypeTable?.map((col, indexCol) => {
                  const asConf = col.advanceSearch ?? {};
                  if (asConf?.name == "") return <th key={indexCol} />;
                  const fieldName = asConf?.name ?? `as_${typeof col.name == "string" ? col.name : col.label}`;
                  function onChangeAdvanceSearch(event: ChangeEvent<HTMLInputElement>) {
                    if (refTimerAdvanceSearch.current && fmParams) {
                      clearTimeout(refTimerAdvanceSearch.current[indexCol]);
                      refTimerAdvanceSearch.current[indexCol] = setTimeout(() => fmParams.setValue(fieldName, event.target.value), 1000);
                    }
                  }
                  return (
                    <th key={indexCol}>
                      <InputText noLabel name={fieldName} defaultValue={fmParams.values[fieldName]} onChange={onChangeAdvanceSearch} />
                    </th>
                  );
                })}
              </tr>
            )}
          </thead>
          <tbody>
            {((!dataPaginateds?.length) || (DataTable?.statusCode == 202)) ? (
              <tr className='empty-row'>
                <td colSpan={(prototypeTable?.length ?? 0) + (noNumber ? 1 : 2)} className="text-center text-gray-500 py-[4rem]">
                  {(DataTable?.statusCode == 202) ? 'Loading...' : 'Data Kosong'}
                </td>
              </tr>
            ) : (
              dataPaginateds?.map((dataRow: any, indexDataRow) => {
                if (isValidElement(dataRow)) return <Fragment key={indexDataRow}>{dataRow}</Fragment>;
                const primaryValue = dataRow?.[primaryKey];
                rowNumber++;
                const isSelected = (DataTable.selectedRows ?? []).findIndex((rowSelected) => (rowSelected?.[primaryKey] == primaryValue)) >= 0;
                return (
                  <tr
                    key={indexDataRow}
                    className={cn({ 'cursor-pointer': onClickRow, 'bg-primary/10': isSelected })}
                    onTouchStart={(event) => {
                      if (ScreenWidth >= 640) return;
                      // prevent hold touch when scroll
                      const touch = event.touches[0];
                      refTimerTouchHold.current.startX = touch.clientX;
                      refTimerTouchHold.current.startY = touch.clientY;
                      refTimerTouchHold.current.isWaiting = true;

                      // init hold touch
                      refTimerTouchHold.current.timer = setTimeout(() => {
                        refTimerTouchHold.current.isWaiting = false;
                        setDataTable((prev) => {
                          const newSelectedRows = (prev.selectedRows ?? []).filter((rowSelected: any) => rowSelected?.[primaryKey] != primaryValue);
                          if (!isSelected) newSelectedRows.push(dataRow);
                          return { ...prev, selectedRows: newSelectedRows };
                        });
                      }, 500);
                    }}
                    onTouchMove={(event) => {
                      // prevent hold touch
                      if (!refTimerTouchHold.current.isWaiting || ScreenWidth >= 640) return;
                      const touch = event.touches[0];
                      const dx = Math.abs(touch.clientX - refTimerTouchHold.current.startX);
                      const dy = Math.abs(touch.clientY - refTimerTouchHold.current.startY);
                      if (dx > 10 || dy > 10) {
                        clearTimeout(refTimerTouchHold.current.timer);
                        refTimerTouchHold.current.isWaiting = false;
                      }
                    }}
                    onTouchEnd={(event) => {
                      if (ScreenWidth >= 640) return;
                      // clear hold touch
                      clearTimeout(refTimerTouchHold.current.timer);
                      if (refTimerTouchHold.current.isWaiting) {
                        refTimerTouchHold.current.isWaiting = false;
                        if (DataTable.selectedRows?.length) {
                          setDataTable((prev) => {
                            const newSelectedRows = (prev.selectedRows ?? []).filter(
                              (rowSelected: any) => rowSelected?.[primaryKey] != primaryValue
                            );
                            if (!isSelected) newSelectedRows.push(dataRow);
                            return { ...prev, selectedRows: newSelectedRows };
                          });
                        } else if (!(event.target as any).closest('.prevent-show') && !window?.getSelection()?.toString()?.trim()?.length)
                          onClickRow?.(dataRow);
                      }
                    }}
                    onClick={(event) => {
                      setTimeout(() => {
                        if (onClickRow && ScreenWidth >= 640 && !(event.target as any).closest('.prevent-show') &&
                          !window?.getSelection()?.toString()?.trim()?.length) onClickRow(dataRow);
                      }, 0);
                    }}
                  >
                    {/* checkbox select row */}
                    {(!noSelectRow && actions?.length) && (
                      <td className={`max-sm:hidden prevent-show`}>
                        <input
                          type="checkbox"
                          checked={isSelected}
                          onChange={() => {
                            setDataTable((prev) => {
                              const newSelectedRows = (prev.selectedRows ?? []).filter((rowSelected: any) => (rowSelected?.[primaryKey] != primaryValue));
                              if (!isSelected) newSelectedRows.push(dataRow);
                              return { ...prev, selectedRows: newSelectedRows };
                            })
                          }}
                        />
                      </td>
                    )}

                    {/* number and data row */}
                    {!noNumber && (<td>{((fmParams?.values?.page || 1) - 1) * (fmParams?.values?.per_page || 10) + rowNumber}</td>)}
                    {prototypeTable?.map(({ name }, indexCol) => (<td key={indexCol}>{getDataCell(dataRow, name)}</td>))}
                  </tr>
                );
              })
            )}
          </tbody>
        </table>
      </div >

      {/* Pagination */}
      < div className="grid grid-cols-4 items-center text-xs -mt-10" >
        <div className="col-span-full sm:col-span-2 lg:col-span-1 lg:order-3 order-2">
          {!(noPerPage) && (
            <div className='flex sm:justify-end items-baseline max-sm:mb-3'>
              <div>Limitasi item: </div>
              <select value={perPage}
                onChange={(e) => { fmParams?.setValues((prev) => ({ ...prev, page: 1, per_page: e.target.value })); }}
                className="text-sm font-medium cursor-pointer hover:bg-gray-100 rounded-md w-[5.25rem] pl-2 py-1"
              >{[50, 100, 500, 1000].map((count) => (<option key={count} className="pl-0" value={count}>{count} Data</option>))}</select>
            </div>
          )}
        </div>
        <div className="lg:col-span-2 col-span-full lg:order-2 order-3">
          {(!noPaginate && lastPage > 1) && (
            <ul className="flex flex-row lg:justify-center items-center gap-1 font-medium whitespace-nowrap">
              {prevPage >= 1 && (<div className={cnItem} onClick={() => onChangePage(prevPage)}><CaretLeftIcon /></div>)}

              {prevPage > 1 && nextPage < lastPage && (<div className={cnItem} onClick={() => onChangePage(1)}>1</div>)}
              {prevPage > 2 && (
                <span aria-hidden="true" className="flex h-9 w-9 items-center justify-center">
                  <DotsThreeIcon weight='bold' />
                  <span className="sr-only">Selebihnya</span>
                </span>
              )}

              {(prevPage - 1) > 1 && nextPage > lastPage && (<div className={cnItem} onClick={() => onChangePage(prevPage - 1)}>{prevPage - 2}</div>)}
              {prevPage > 1 && nextPage >= lastPage && (<div className={cnItem} onClick={() => onChangePage(prevPage - 1)}>{prevPage - 1}</div>)}

              {prevPage >= 1 && (<div className={cn(cnItem, { border: prevPage == currentPage })} onClick={() => onChangePage(prevPage)}>{prevPage}</div>)}
              <div className={cn(cnItem, "border")}>{currentPage}</div>
              {nextPage <= lastPage && (<div className={cn(cnItem, { border: nextPage == currentPage })} onClick={() => onChangePage(nextPage)}>{nextPage}</div>)}

              {nextPage < lastPage && prevPage <= 1 && (<div className={cnItem} onClick={() => onChangePage(nextPage + 1)}>{nextPage + 1}</div>)}
              {(nextPage + 1) < lastPage && prevPage < 1 && (<div className={cnItem} onClick={() => onChangePage(nextPage + 1)}>{nextPage + 2}</div>)}

              {nextPage < (lastPage - 1) && (
                <span aria-hidden="true" className="flex h-9 w-9 items-center justify-center">
                  <DotsThreeIcon weight="bold" />
                  <span className="sr-only">Selebihnya</span>
                </span>
              )}
              {nextPage < lastPage && prevPage > 1 && (<div className={cn(cnItem, { border: lastPage == currentPage })} onClick={() => onChangePage(lastPage)}>{lastPage}</div>)}

              {nextPage <= lastPage && (<div className={cnItem} onClick={() => onChangePage(nextPage)}><CaretRightIcon /></div>)}
            </ul>
          )}
        </div>
        <div className='col-span-full sm:col-span-2 lg:col-span-1 order-1'>
          <div className="whitespace-nowrap flex items-center gap-1">
            <span>Menampilkan {sequenceFirstItemShowed + Number(Boolean(dataPaginateds?.length))}</span>
            <span>hingga {sequenceFirstItemShowed + (dataPaginateds?.length ?? 0)}</span>
            <span>dari {totalItem} data</span>
          </div>
        </div>
      </div >

      {/* Action */}
      <Confirm
        show={Boolean(DataTable.confirmDeletedRows?.length)} toHide={() => setDataTable((prev) => ({ ...(prev ?? {}), confirmDeletedRows: [] }))} onApproved={handleDelete}
        question={`${DataTable.confirmDeletedRows?.length} baris data terpilih akan dihapus. Apakah anda yakin ingin melakukan hal ini?`}
      />
      <div className={cn(
        'fixed z-[-1] bottom-14 sm:bottom-4 left-1/2 -translate-1/2 max-w-7xl w-[calc(100vw-1rem)] sm:w-xl h-[3rem] opacity-0 duration-200',
        'shadow-2xl shadow-gray-950 bg-gray-950 backdrop-blur-xs text-white/80 font-medium px-6 text-xs flex items-center rounded-lg',
        { 'opacity-100 z-10': DataTable.selectedRows?.length }
      )}>
        <div className='border-r pr-4 mr-2 text-white'>{DataTable.selectedRows?.length} <span className='max-sm:hidden'>Item</span> terpilih</div>
        {actions?.map((action, indexAction) => {
          if (action == 'delete') return (
            <div key={indexAction} onClick={() => setDataTable((prev) => ({ ...(prev ?? {}), confirmDeletedRows: DataTable.selectedRows ?? [] }))}
              className='flex items-center gap-1 mx-2.5 cursor-pointer hover:text-secondary'>
              <TrashSimpleIcon weight="bold" className='text-base' />
              <span>Hapus</span>
            </div>
          );
          else return (
            <Link
              key={indexAction}
              className={cn('flex items-center gap-1 mx-1 sm:mx-2.5 cursor-pointer hover:text-secondary', action.className)}
              onClick={action.onClick}
              href={action.href ?? ''}
            >{action.icon}<div>{action.label}</div></Link>
          );
        })}
        <div className='ml-auto'>
          <div className='text-red-500 tracking-wider font-semibold cursor-pointer hover:text-red-500/90'
            onClick={() => setDataTable((prev) => ({ ...prev, selectedRows: [] }))}>Batal</div>
        </div>
      </div>
    </>
  )
}




function AdvanceFilter({ prototypeTable, fmParams, fmFilters, noSearch, setLabelFilters }: {
  prototypeTable: Array<typePrototypeTable>;
  fmParams: ReturnType<typeof useFormManager>;
  fmFilters: ReturnType<typeof useFormManager>;
  noSearch?: boolean;
  setLabelFilters: Dispatch<SetStateAction<Array<any>>>;
}) {
  return (<>
    <div
      className={`btn-flat bg-primary text-contras-primary px-4 h-10 ${!noSearch ? 'rounded-l-none' : ''}`}
      onClick={() => fmFilters.setShow(true)}
    >
      <FadersIcon weight='fill' className='text-base rotate-90' />
      <span>Filter</span>
    </div>
    <Dropdown
      show={fmFilters.show}
      toHide={() => {
        fmFilters.setValue('filters', fmParams.values.filters ?? [])
        fmFilters.setShow(false)
      }}
      className='top-12 right-0 sm:min-w-md max-w-xl p-4 z-[5]'
    >
      <div>
        <div className='text-sm font-semibold'>Filter Table</div>
        <table className='text-sm w-full [&>tbody>tr>td]:pt-4'>
          <tbody>
            {(fmFilters.values.filters as any[])?.map((filter, indexFilter) => (
              <tr key={indexFilter}>
                <td>
                  <select
                    value={filter?.[0]}
                    onChange={(event) => {
                      fmFilters.setValue('filters', (prev: any) => {
                        prev[indexFilter] = [event.target.value, prev?.[indexFilter]?.[1], prev?.[indexFilter]?.[2]];
                        return [...prev];
                      });
                      setLabelFilters((prev) => {
                        prev[indexFilter] = event.target.options[event.target.selectedIndex].innerText;
                        return [...prev];
                      })
                    }}
                    className='appearance-none capitalize invalid:text-gray-500 w-full h-[2.5rem] border-gray-300 border px-2 rounded-l-md sm:min-w-16'
                    required
                  >
                    {prototypeTable.map((pt, indexPt) => {
                      const opt = pt.advanceFilter?.name ?? (typeof pt.name == "string" ? pt.name : null);
                      return (!!(opt) && (<option key={indexPt} value={opt}>{pt?.advanceFilter?.label ?? pt.label ?? opt}</option>))
                    })}
                  </select>
                </td>
                <td>
                  <select
                    value={filter?.[1]}
                    onChange={(event) => {
                      fmFilters.setValue('filters', (prev: any) => {
                        prev[indexFilter] = [prev?.[indexFilter]?.[0], event.target.value, prev?.[indexFilter]?.[2]];
                        return [...prev];
                      });
                    }}
                    className='appearance-none invalid:text-gray-500 w-full h-[2.5rem] border-gray-300 border-y px-2 text-center'
                    required
                  >
                    {['LIKE', '=', '!=', '<', '<=', '>', '>='].map((sym, indexSym) => (<option key={indexSym}>{sym}</option>))}
                  </select>
                </td>
                <td>
                  <div className='[&_.input-form]:rounded-none [&_.input-form]:border-r-0'>
                    <Input
                      noLabel
                      value={filter?.[2]}
                      onChange={(event) => {
                        fmFilters.setValue('filters', (prev: any) => {
                          prev[indexFilter] = [prev?.[indexFilter]?.[0], prev?.[indexFilter]?.[1], event.target.value]
                          return [...prev]
                        })
                      }}
                      placeholder='Parameter Filter'
                    />
                  </div>
                </td>
                <td>
                  <div
                    className='h-[2.5rem] px-2 flex border rounded-r-md text-gray-600 cursor-pointer hover:text-red-500'
                    onClick={() => {
                      setTimeout(() => {
                        fmFilters.setValue('filters', (prev: any[]) => prev.filter((_, indexRmFilter) => indexRmFilter != indexFilter));
                        setLabelFilters((prev: any[]) => prev.filter((_, indexRmFilter) => indexRmFilter != indexFilter));
                      }, 0);
                    }}
                  ><TrashIcon className='text-base m-auto' weight='bold' /></div>
                </td>
              </tr>
            ))}
            <tr>
              <td colSpan={4}>
                <div
                  className='inline-flex items-center gap-1 bg-primary/10 text-primary rounded px-2 py-1.5 cursor-pointer'
                  onClick={() => {
                    const fieldNames = prototypeTable.map((pt) => (pt.advanceFilter?.name ?? (typeof pt.name == "string" ? pt.name : null)));
                    const indexFieldName = fieldNames.findIndex(Boolean);
                    const pt = prototypeTable[indexFieldName];
                    fmFilters.setValue('filters', (prev: any) => ([...(prev ?? []), [fieldNames[indexFieldName], 'LIKE', '']]));
                    setLabelFilters((prev) => ([...(prev ?? []), (pt?.advanceFilter?.label ?? pt.label ?? fieldNames[indexFieldName])]));
                  }}
                >
                  <PlusCircleIcon weight='bold' />
                  <span className='text-xs font-medium'>Filter Baru</span>
                </div>
              </td>
            </tr>
            <tr>
              <td colSpan={4}>
                <div className='w-full flex justify-end items-center gap-2'>
                  <div
                    className='btn-flat bg-gray-100'
                    onClick={() => {
                      fmFilters.setValue('filters', fmParams.values.filters ?? [])
                      fmFilters.setShow(false)
                    }}>batal</div>
                  <div
                    className='btn btn-sm'
                    onClick={() => {
                      fmParams.setValue('filters', fmFilters.values.filters ?? [])
                      fmFilters.setShow(false)
                    }}>terapkan</div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </Dropdown >
  </>)
}